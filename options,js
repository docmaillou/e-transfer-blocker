// Options page controller for E-Transfer Blocker
class OptionsController {
  constructor() {
    this.init();
  }

  async init() {
    await this.loadSettings();
    this.setupEventListeners();
    this.loadLogs();
    this.loadWhitelist();
  }

  async loadSettings() {
    try {
      const result = await chrome.storage.sync.get([
        'isEnabled',
        'showNotifications',
        'strictMode',
        'adminPassword'
      ]);

      // Update UI with current settings
      document.getElementById('enableProtection').checked = result.isEnabled !== false;
      document.getElementById('showNotifications').checked = result.showNotifications !== false;
      document.getElementById('strictMode').checked = result.strictMode === true;
    } catch (error) {
      console.error('Failed to load settings:', error);
      this.showAlert('Failed to load settings', 'danger');
    }
  }

  setupEventListeners() {
    // General settings toggles
    document.getElementById('enableProtection').addEventListener('change', (e) => {
      this.saveSetting('isEnabled', e.target.checked);
    });

    document.getElementById('showNotifications').addEventListener('change', (e) => {
      this.saveSetting('showNotifications', e.target.checked);
    });

    document.getElementById('strictMode').addEventListener('change', (e) => {
      this.saveSetting('strictMode', e.target.checked);
    });

    // Password change
    document.getElementById('changePasswordBtn').addEventListener('click', () => {
      this.changePassword();
    });

    // Whitelist management
    document.getElementById('addWhitelistBtn').addEventListener('click', () => {
      this.addToWhitelist();
    });

    // Logs management
    document.getElementById('clearLogsBtn').addEventListener('click', () => {
      this.clearLogs();
    });

    // Import/Export
    document.getElementById('exportSettingsBtn').addEventListener('click', () => {
      this.exportSettings();
    });

    document.getElementById('importSettingsBtn').addEventListener('click', () => {
      document.getElementById('importFile').click();
    });

    document.getElementById('importFile').addEventListener('change', (e) => {
      this.importSettings(e.target.files[0]);
    });

    document.getElementById('resetSettingsBtn').addEventListener('click', () => {
      this.resetSettings();
    });
  }

  async saveSetting(key, value) {
    try {
      await chrome.storage.sync.set({ [key]: value });
      this.showAlert(`Setting updated: ${key}`, 'success');
    } catch (error) {
      console.error('Failed to save setting:', error);
      this.showAlert('Failed to save setting', 'danger');
    }
  }

  async changePassword() {
    const currentPassword = document.getElementById('currentPassword').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;

    if (!currentPassword || !newPassword || !confirmPassword) {
      this.showAlert('Please fill in all password fields', 'danger');
      return;
    }

    if (newPassword !== confirmPassword) {
      this.showAlert('New passwords do not match', 'danger');
      return;
    }

    if (newPassword.length < 6) {
      this.showAlert('Password must be at least 6 characters long', 'danger');
      return;
    }

    try {
      // Verify current password
      const result = await chrome.storage.sync.get(['adminPassword']);
      const currentHash = await this.hashPassword(currentPassword);
      
      if (currentHash !== result.adminPassword) {
        this.showAlert('Current password is incorrect', 'danger');
        return;
      }

      // Save new password
      const newHash = await this.hashPassword(newPassword);
      await chrome.storage.sync.set({ adminPassword: newHash });

      // Clear form
      document.getElementById('currentPassword').value = '';
      document.getElementById('newPassword').value = '';
      document.getElementById('confirmPassword').value = '';

      this.showAlert('Password updated successfully', 'success');
    } catch (error) {
      console.error('Failed to change password:', error);
      this.showAlert('Failed to change password', 'danger');
    }
  }

  async hashPassword(password) {
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    const hash = await crypto.subtle.digest('SHA-256', data);
    return Array.from(new Uint8Array(hash))
      .map(b => b.toString(16).padStart(2, '0'))
      .join('');
  }

  async addToWhitelist() {
    const email = document.getElementById('whitelistEmail').value.trim();
    const domain = document.getElementById('whitelistDomain').value;

    if (!email && !domain) {
      this.showAlert('Please enter an email or select a domain', 'danger');
      return;
    }

    try {
      const result = await chrome.storage.sync.get(['whitelist']);
      const whitelist = result.whitelist || [];

      const newEntry = {
        id: Date.now(),
        email: email || null,
        domain: domain || null,
        dateAdded: new Date().toISOString()
      };

      // Check for duplicates
      const isDuplicate = whitelist.some(entry => 
        (entry.email === newEntry.email && newEntry.email) ||
        (entry.domain === newEntry.domain && newEntry.domain)
      );

      if (isDuplicate) {
        this.showAlert('Entry already exists in whitelist', 'danger');
        return;
      }

      whitelist.push(newEntry);
      await chrome.storage.sync.set({ whitelist });

      // Clear form
      document.getElementById('whitelistEmail').value = '';
      document.getElementById('whitelistDomain').value = '';

      this.showAlert('Added to whitelist successfully', 'success');
      this.loadWhitelist();
    } catch (error) {
      console.error('Failed to add to whitelist:', error);
      this.showAlert('Failed to add to whitelist', 'danger');
    }
  }

  async loadWhitelist() {
    try {
      const result = await chrome.storage.sync.get(['whitelist']);
      const whitelist = result.whitelist || [];
      
      const container = document.getElementById('whitelistItems');
      
      if (whitelist.length === 0) {
        container.innerHTML = '<p style="color: #6c757d; font-style: italic;">No whitelist entries</p>';
        return;
      }

      container.innerHTML = whitelist.map(entry => `
        <div class="whitelist-item">
          <div class="whitelist-info">
            <div class="whitelist-email">${entry.email || entry.domain}</div>
            <div class="whitelist-domain">Added: ${new Date(entry.dateAdded).toLocaleDateString()}</div>
          </div>
          <button class="remove-btn" onclick="optionsController.removeFromWhitelist(${entry.id})">Remove</button>
        </div>
      `).join('');
    } catch (error) {
      console.error('Failed to load whitelist:', error);
    }
  }

  async removeFromWhitelist(id) {
    try {
      const result = await chrome.storage.sync.get(['whitelist']);
      const whitelist = result.whitelist || [];
      
      const updatedWhitelist = whitelist.filter(entry => entry.id !== id);
      await chrome.storage.sync.set({ whitelist: updatedWhitelist });
      
      this.showAlert('Removed from whitelist', 'success');
      this.loadWhitelist();
    } catch (error) {
      console.error('Failed to remove from whitelist:', error);
      this.showAlert('Failed to remove from whitelist', 'danger');
    }
  }

  async loadLogs() {
    try {
      const result = await chrome.storage.sync.get(['blockedAttempts']);
      const logs = result.blockedAttempts || [];
      
      document.getElementById('totalBlocked').textContent = logs.length;
      
      const tbody = document.getElementById('logsTableBody');
      
      if (logs.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: #6c757d; font-style: italic;">No blocked attempts</td></tr>';
        return;
      }

      // Show most recent entries first
      const recentLogs = logs.slice(-50).reverse();
      
      tbody.innerHTML = recentLogs.map(log => `
        <tr>
          <td>${new Date(log.timestamp).toLocaleString()}</td>
          <td>${log.domain}</td>
          <td>$${log.amount}</td>
          <td><span class="status-blocked">Blocked</span></td>
        </tr>
      `).join('');
    } catch (error) {
      console.error('Failed to load logs:', error);
    }
  }

  async clearLogs() {
    if (!confirm('Are you sure you want to clear all activity logs? This action cannot be undone.')) {
      return;
    }

    try {
      await chrome.storage.sync.set({ blockedAttempts: [] });
      this.showAlert('Activity logs cleared', 'success');
      this.loadLogs();
    } catch (error) {
      console.error('Failed to clear logs:', error);
      this.showAlert('Failed to clear logs', 'danger');
    }
  }

  async exportSettings() {
    try {
      const result = await chrome.storage.sync.get([
        'isEnabled',
        'showNotifications', 
        'strictMode',
        'whitelist',
        'blockedAttempts'
      ]);

      // Remove sensitive data like password hash
      const exportData = {
        ...result,
        exportDate: new Date().toISOString(),
        version: '1.0.0'
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `etransfer-blocker-settings-${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      
      URL.revokeObjectURL(url);
      this.showAlert('Settings exported successfully', 'success');
    } catch (error) {
      console.error('Failed to export settings:', error);
      this.showAlert('Failed to export settings', 'danger');
    }
  }

  async importSettings(file) {
    if (!file) return;

    try {
      const text = await file.text();
      const data = JSON.parse(text);

      // Validate the imported data
      if (!data.version) {
        this.showAlert('Invalid settings file format', 'danger');
        return;
      }

      // Confirm import
      if (!confirm('This will overwrite your current settings. Are you sure you want to continue?')) {
        return;
      }

      // Import only safe settings (exclude password)
      const safeSettings = {
        isEnabled: data.isEnabled,
        showNotifications: data.showNotifications,
        strictMode: data.strictMode,
        whitelist: data.whitelist || [],
        blockedAttempts: data.blockedAttempts || []
      };

      await chrome.storage.sync.set(safeSettings);
      
      this.showAlert('Settings imported successfully', 'success');
      
      // Reload the page to reflect changes
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error) {
      console.error('Failed to import settings:', error);
      this.showAlert('Failed to import settings. Please check the file format.', 'danger');
    }
  }

  async resetSettings() {
    if (!confirm('This will reset all settings to default values. Are you sure?')) {
      return;
    }

    if (!confirm('This action cannot be undone. All whitelist entries and logs will be lost. Continue?')) {
      return;
    }

    try {
      // Clear all settings except keep the password
      const result = await chrome.storage.sync.get(['adminPassword']);
      await chrome.storage.sync.clear();
      
      // Restore password and set defaults
      await chrome.storage.sync.set({
        adminPassword: result.adminPassword,
        isEnabled: true,
        showNotifications: true,
        strictMode: false,
        whitelist: [],
        blockedAttempts: []
      });

      this.showAlert('Settings reset to defaults', 'success');
      
      // Reload the page
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error) {
      console.error('Failed to reset settings:', error);
      this.showAlert('Failed to reset settings', 'danger');
    }
  }

  showAlert(message, type = 'info') {
    // Remove existing alerts
    const existingAlerts = document.querySelectorAll('.alert-temp');
    existingAlerts.forEach(alert => alert.remove());

    // Create new alert
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-temp`;
    alert.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
      min-width: 300px;
      max-width: 500px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      animation: slideInRight 0.3s ease;
    `;
    alert.textContent = message;

    document.body.appendChild(alert);

    // Auto-remove after 4 seconds
    setTimeout(() => {
      if (alert.parentNode) {
        alert.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
          alert.remove();
        }, 300);
      }
    }, 4000);
  }
}

// CSS animations for alerts
const style = document.createElement('style');
style.textContent = `
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOutRight {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
`;
document.head.appendChild(style);

// Initialize options controller and make it globally available
let optionsController;
document.addEventListener('DOMContentLoaded', () => {
  optionsController = new OptionsController();
});